# .github/workflows/release-builder.yml

# Nome do Workflow: Aparecerá no separador "Actions" do seu repositório no GitHub.
name: Build Android Release APK

# Gatilho (Trigger): Define quando este workflow deve ser executado.
on:
  push:
    tags:
      - 'v*.*.*' # Executa sempre que uma tag que começa com 'v' (ex: v1.0.0, v1.2.3) é enviada para o repositório.

# Trabalhos (Jobs): Define uma sequência de tarefas a serem executadas.
jobs:
  build-android:
    # Nome do trabalho: Aparecerá na interface do GitHub Actions.
    name: Build Flutter App for Android

    # Máquina Virtual: Especifica o tipo de máquina que o GitHub deve usar para executar o trabalho.
    # 'ubuntu-latest' é a escolha padrão e recomendada para builds Android.
    runs-on: ubuntu-latest

    # Passos (Steps): A sequência de ações que compõem o trabalho.
    steps:
      # 1. Checkout do Código
      # Baixa o código do seu repositório para a máquina virtual.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar o Java (JDK)
      # O Flutter para Android depende do Java Development Kit.
      # A versão 17 é uma escolha segura e moderna para builds Android atuais.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Configurar o Flutter SDK
      # Baixa e instala a versão especificada do Flutter na máquina virtual.
      # É uma boa prática fixar a versão para garantir builds consistentes.
      # Verifique a sua versão local com `flutter --version` e use-a aqui.
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5' # Substitua pela sua versão do Flutter, se for diferente.
          channel: 'stable'
          cache: true # Ativa o cache para acelerar builds futuros.

      # 4. Instalar Dependências do Projeto
      # Executa `flutter pub get` para baixar todos os pacotes listados no pubspec.yaml.
      - name: Install dependencies
        run: flutter pub get

      # 5. Limpar o Projeto (Boa Prática)
      # Executa `flutter clean` para garantir que não há artefactos de builds anteriores.
      - name: Clean project
        run: flutter clean

      # 6. Compilar o APK de Release
      # O comando principal que compila a aplicação em modo de produção.
      - name: Build APK
        run: flutter build apk --release

      # 7. Renomear o APK (Opcional, mas recomendado)
      # Renomeia o `app-release.apk` para um nome mais descritivo, incluindo a versão da tag.
      # `${{ github.ref_name }}` é uma variável do GitHub que contém o nome da tag (ex: "v1.0.0").
      - name: Rename APK
        run: mv build/app/outputs/flutter-apk/app-release.apk CajuScan-${{ github.ref_name }}.apk

      # 8. Fazer Upload do APK para a Release
      # Esta ação faz o upload do APK compilado e anexa-o à página da Release no GitHub.
      - name: Upload APK to Release
        uses: softprops/action-gh-release@v2
        with:
          # O nome do ficheiro que será anexado à release.
          files: CajuScan-${{ github.ref_name }}.apk
